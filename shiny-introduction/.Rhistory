humans <- rep(NA, periods+1)
vampires <- rep(NA, periods+1)
humans[1] <- H
vampires[1] <- V
for (i in (seq_len(periods)+1)) {
humans[i] <- humans[i-1] + dH.dt(humans[i-1], vampires[i-1])
vampires[i] <- vampires[i-1] + dV.dt(humans[i-1], vampires[i-1])
}
humans
vampires
dta <- cbind(
seq_len(periods+1),
humans,
vampires
)
dV.dt <- function(H, V) {
# b*a*H*V + m*V - s*V
b*a*H*V + m*V - s*V
}
periods <- 100
humans <- rep(NA, periods+1)
vampires <- rep(NA, periods+1)
humans[1] <- H
vampires[1] <- V
for (i in (seq_len(periods)+1)) {
humans[i] <- humans[i-1] + dH.dt(humans[i-1], vampires[i-1])
vampires[i] <- vampires[i-1] + dV.dt(humans[i-1], vampires[i-1])
}
humans
vampires
dta <- cbind(
seq_len(periods+1),
humans,
vampires
)
simulate.vampires <- function(periods = 50) {
humans <- rep(NA, periods+1)
vampires <- rep(NA, periods+1)
humans[1] <- H
vampires[1] <- V
for (i in (seq_len(periods)+1)) {
humans[i] <- humans[i-1] + dH.dt(humans[i-1], vampires[i-1])
vampires[i] <- vampires[i-1] + dV.dt(humans[i-1], vampires[i-1])
}
return(cbind(period = seq_len(periods+1), humans, vampires))
}
dta <- simulate.vampires(50)
View(dta)
ln(1/3)
log(1/3)
log(1+1/3)
log(1.10)
log(1.33)
log(1-1/3)
1/240
dta <- simulate.vampires(50, H, V)
## simulation loop
simulate.vampires <- function(periods = 50, H, V) {
# initialise vectors at correct size for speed
humans <- rep(NA, periods+1)
vampires <- rep(NA, periods+1)
# initial populations
humans[1] <- H
vampires[1] <- V
for (i in (seq_len(periods)+1)) {
humans[i] <- humans[i-1] + dH.dt(humans[i-1], vampires[i-1])
vampires[i] <- vampires[i-1] + dV.dt(humans[i-1], vampires[i-1])
}
return(cbind(period = seq_len(periods+1), humans, vampires))
}
dta <- simulate.vampires(50, H, V)
simulate.vampires <- function(periods = 50, H, V) {
# initialise vectors at correct size for speed
humans <- rep(NA, periods+1)
vampires <- rep(NA, periods+1)
# initial populations
humans[1] <- H
vampires[1] <- V
# loop through periods
for (i in (seq_len(periods)+1)) {
humans[i] <- humans[i-1] + dH.dt(humans[i-1], vampires[i-1])
vampires[i] <- vampires[i-1] + dV.dt(humans[i-1], vampires[i-1])
}
# return all as data.frame
return(as.data.frame(cbind(period = seq_len(periods+1), humans, vampires)))
}
dta <- simulate.vampires(50, H, V)
View(dta)
simulate.vampires <- function(periods = 50, H, V) {
# initialise vectors at correct size for speed
humans <- rep(NA, periods+1)
vampires <- rep(NA, periods+1)
# initial populations
humans[1] <- H
vampires[1] <- V
# loop through periods, start at 2
for (i in (seq_len(periods)+1)) {
humans[i] <- humans[i-1] + dH.dt(humans[i-1], vampires[i-1])
vampires[i] <- vampires[i-1] + dV.dt(humans[i-1], vampires[i-1])
}
# return all as data.frame
return(as.data.frame(period = seq_len(periods+1), humans, vampires))
}
dta <- simulate.vampires(50, H, V)
## simulation loop
simulate.vampires <- function(periods = 50, H, V) {
# initialise vectors at correct size for speed
humans <- rep(NA, periods+1)
vampires <- rep(NA, periods+1)
# initial populations
humans[1] <- H
vampires[1] <- V
# loop through periods, start at 2
for (i in (seq_len(periods)+1)) {
humans[i] <- humans[i-1] + dH.dt(humans[i-1], vampires[i-1])
vampires[i] <- vampires[i-1] + dV.dt(humans[i-1], vampires[i-1])
}
# return all as data.frame
return(as.data.frame(cbind(period = seq_len(periods+1), humans, vampires)))
}
dta <- simulate.vampires(50, H, V)
View(dta)
## simulation loop
simulate.vampires <- function(periods = 50, H, V) {
# initialise vectors at correct size for speed
humans <- rep(NA, periods+1)
dH <- rep(NA, periods+1)
vampires <- rep(NA, periods+1)
dV <- rep(NA, periods+1)
# initial populations
humans[1] <- H
vampires[1] <- V
# loop through periods, start at 2
for (i in (seq_len(periods)+1)) {
humans[i] <- humans[i-1] + dH.dt(humans[i-1], vampires[i-1])
dH[i] <- dH.dt(humans[i-1], vampires[i-1])
vampires[i] <- vampires[i-1] + dV.dt(humans[i-1], vampires[i-1])
dV[i] <- dV.dt(humans[i-1], vampires[i-1])
}
# return all as data.frame
return(as.data.frame(cbind(period = seq_len(periods+1), humans, dH, vampires, dV)))
}
dta <- simulate.vampires(50, H, V)
H <- 40000
V <- 10
dta <- simulate.vampires(50, H, V)
dta %>% ggplot()+
geom_line()+
aes(x=humans, y=vampires)
library(ggplot2)
dta %>% ggplot()+
geom_line()+
aes(x=humans, y=vampires)
H <- 30000
V <- 18
dta <- simulate.vampires(50, H, V)
dta <- simulate.vampires(50, H, V)
dta %>% ggplot()+
geom_line()+
aes(x=humans, y=vampires)
View(dta)
dta %>% ggplot()+
geom_line()+
aes(x=humans, y=log(vampires))
## simulation loop
simulate.vampires <- function(periods = 50, H, V) {
# initialise vectors at correct size for speed
humans <- rep(NA, periods+1)
dH <- rep(NA, periods+1)
vampires <- rep(NA, periods+1)
dV <- rep(NA, periods+1)
# initial populations
humans[1] <- H
vampires[1] <- V
# loop through periods, start at 2
for (i in (seq_len(periods)+1)) {
dH[i] <- dH.dt(humans[i-1], vampires[i-1])
humans[i] <- humans[i-1] + dH[i]
dV[i] <- dV.dt(humans[i-1], vampires[i-1])
vampires[i] <- vampires[i-1] + dV[i]
}
# return all as data.frame
return(as.data.frame(cbind(period = seq_len(periods+1), humans, dH, vampires, dV)))
}
dta <- simulate.vampires(50, H, V)
View(dta)
V <- 40
H <- 30000
V <- 40
View(dta)
V <- 40
dta <- simulate.vampires(50, H, V)
View(dta)
dta %>% ggplot()+
geom_line()+
aes(x=humans, y=log(vampires))
log(1.1)
log(1)
log(0.9)
log(0.666)
log(1.3333)
shiny::runApp('D:/gitlab/server-simulation/shiny/server_simulation')
shiny::runApp('D:/gitlab/server-simulation/shiny/server_simulation')
shiny::runApp('D:/gitlab/server-simulation/shiny/server_simulation')
install.package("rvest")
install.packages("rvest")
?rvest
vignette(rvest)
vignette("rvest")
vignette("selectorgadget")
bond.url <-  "https://en.wikipedia.org/w/index.php?title=List_of_James_Bond_films&oldid=688916363"
bond <- html(bond.url)
library(rvest)
bond <- html(bond.url)
library8bbbi
library(bbbi)
Proxy()
bond <- read_html(bond.url)
bond.url <- "D:/github/james_bond_films/List of James Bond films - Wikipedia, the free encyclopedia.htm"
bond <- read_html(bond.url)
bond_films %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
bond_films <- bond %>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
bond_films <- bond %>%
html_nodes("table") %>%
.[[1]] %>%
html_table(fill = TRUE)
View(bond_films)
bond.wiki <- read_html(bond.url)
# film data
bond.films <- bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[1]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE)
# ratings on films
bond.ratings <- bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[2]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE)
View(bond.ratings)
bond.ratings %>% select(Awards) %>% head()
library(dplyr)
bond.ratings %>% select(Awards) %>% head()
?html_table
# film data
bond.films <- bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[1]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE) %>%
# remove first and last line (inner-table headers)
head(-1) %>% tail(-1)
View(bond_films)
bond.films <- bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[1]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE)
?head()
bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[1]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE)
bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[1]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE) %>%
# remove first and last line (inner-table headers)
head(-1)
# film data
bond.films <- bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[1]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE) %>%
# remove first and last line (inner-table headers)
head(-3)
View(bond.films)
View(bond_films)
# film data
bond.films <- bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[1]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE) %>%
# remove first and last line (inner-table headers)
head(-1)
bond.films <- bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[1]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE)
bond.films <- bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[1]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE) %>%
# remove first and last line (inner-table headers)
head(-1)
bond.films <- bond.wiki %>%
html_nodes("table") %>%
# first table in the page
.[[1]] %>%
# fill, because of multi-cell formatting :(
html_table(fill = TRUE) %>%
# remove first and last line (inner-table headers)
head(-1) %>% tail(-1)
-paste(c("on the Cayuga Lake Wine Trail", "Cayuga Lake Wine Trail",
"on the Cayuga Wine Trail", "on the Finger Lakes Beer Trail"), collapse="|")
paste(c("on the Cayuga Lake Wine Trail", "Cayuga Lake Wine Trail", "on the Cayuga Wine Trail", "on the Finger Lakes Beer Trail"), collapse="|")
paste(c("on the Cayuga Lake Wine Trail", "Cayuga Lake Wine Trail", "on the Cayuga Wine Trail", "on the Finger Lakes Beer Trail"))
library(httr)
# set_config(use_proxy(url="10.26.0.19", port=3128))
set_config(use_proxy(url="proxy.ubisoft.org", port=3128))
resp <- GET("https://metacritic-2.p.mashape.com/find/game?platform=pc&title=Assassin's%20Creed%20III",
add_headers("X-Mashape-Key" = "JAhfTs60KOmshsg6uhdjU5uM05vgp1Z0edDjsnjK68v0TLoQMm",
"Accept" = "application/json"))
headers(resp)
str(content(resp))
test <- as.data.frame(unlist(fromJSON(content(resp, as = "text"))))
library(jsonlite)
test <- as.data.frame(unlist(fromJSON(content(resp, as = "text"))))
test2 <- as.data.frame(unlist(fromJSON(content(resp, as = "text"))))
tt <- rbind(test, test2)
View(tt)
?fromJSON
as.data.frame(fromJSON(content(resp, as = "text")))
tt <- as.data.frame(fromJSON(content(resp, as = "text")))
test <- as.data.frame(fromJSON(content(resp, as = "text")))
test2 <- as.data.frame(fromJSON(content(resp, as = "text")))
tt <- rbind(test, test2)
View(tt)
Mashape.Key <- "JAhfTs60KOmshsg6uhdjU5uM05vgp1Z0edDjsnjK68v0TLoQMm"
#perform a GET request on the URL, with two headers and store in a resp variable
resp <- GET("https://metacritic-2.p.mashape.com/find/game?platform=pc&title=Assassin's%20Creed%20III",
add_headers("X-Mashape-Key" = Mashape.Key,
"Accept" = "application/json"))
str(content(resp))
game.title <- "Assassin's%20Creed%20III"
#perform a GET request on the URL, with two headers and store in a resp variable
resp <- GET(paste0("https://metacritic-2.p.mashape.com/find/game?platform=pc&title=", game.title),
add_headers("X-Mashape-Key" = Mashape.Key,
"Accept" = "application/json"))
str(content(resp))
headers(resp)
f.get.metacritic <- function(game, key = Mashape.Key) {
# get metacritic data from mashape API: https://market.mashape.com/byroredux/metacritic-v2
# http://stackoverflow.com/questions/30382196/use-mashape-with-r
resp <- GET(paste0("https://metacritic-2.p.mashape.com/find/game?platform=pc&title=", game),
add_headers("X-Mashape-Key" = key,
"Accept" = "application/json"))
# prints the headers
#headers(resp)
# prints the content of the response
#str(content(resp))
# return data as dataframe, needs library(jsonlite)
return(as.data.frame(fromJSON(content(resp, as = "text"))))
}
tt2 <- f.get.metacritic(game.title)
View(tt2)
Sys.getenv("Mashape.key")
games <- c("Anno 2205, "Assassin's Creed IV: Black Flag", "Far Cry 4")
games <- c("Anno 2205", "Assassin's Creed IV: Black Flag", "Far Cry 4")
source("https://gist.githubusercontent.com/safferli/5cdf28465fd7cec7ef6b/raw/e6166ffbc5560f1260cbcb54ed99f0efc605cd76/metacritic-api.r")
set_config(use_proxy(url="proxy.ubisoft.org", port=3128))
games <- c("Anno 2205", "Assassin's Creed IV: Black Flag", "Far Cry 4")
dta <- f.generate.metacritic.data(games)
paste0("https://metacritic-2.p.mashape.com/find/game?platform=", platform, "&title=", game)
platform="pc"
paste0("https://metacritic-2.p.mashape.com/find/game?platform=", platform, "&title=", game)
game = "test"
paste0("https://metacritic-2.p.mashape.com/find/game?platform=", platform, "&title=", game)
f.call.metacritic.API("Anno%202205")
f.generate.metacritic.data <- function(games.vector) {
## generate a dataframe of metacritic API data for a given vector of game names
# games.vector needs to be a character vector!
if(!is.character(games.vector)) stop("f.generate.metacritic.data(): input is not a character vector")
# clean the namelist -- API does not recognise spaces, and metacritic removes & and ndashes in titles
# replace spaces
games.web <- gsub(" ", "%20",
# remove "-" ndash
gsub(" - ", "  ",
# remove "&" ampersand
gsub("&", "", games.vector)))
# number of games in vector
num.of.games <- length(games.web)
## initialise dataset
mtac <- vector("list", num.of.games)
## fill list with API call results
for (i in seq_len(num.of.games)) {
mtac[[i]] <- f.call.metacritic.API(games.web[i])
}
## bind into one dataframe
metacritic <- rbindlist(mtac, fill = TRUE) %>%
# remove last stray column (from the empty/missing results of the API calls)
#select(-result) %>% # this breaks if there are no invalid calls
# remove leading "result." in variable names
setNames(gsub("^result.", "", names(metacritic)))
# generate clean dataset from original games list
metacritic <- data.frame(name = games.vector) %>%
merge(metacritic, all.x = TRUE)
return(metacritic)
}
dta <- f.generate.metacritic.data(games)
f.generate.metacritic.data <- function(games.vector) {
## generate a dataframe of metacritic API data for a given vector of game names
# games.vector needs to be a character vector!
if(!is.character(games.vector)) stop("f.generate.metacritic.data(): input is not a character vector")
# clean the namelist -- API does not recognise spaces, and metacritic removes & and ndashes in titles
# replace spaces
games.web <- gsub(" ", "%20",
# remove "-" ndash
gsub(" - ", "  ",
# remove "&" ampersand
gsub("&", "", games.vector)))
# number of games in vector
num.of.games <- length(games.web)
## initialise dataset
mtac <- vector("list", num.of.games)
## fill list with API call results
for (i in seq_len(num.of.games)) {
mtac[[i]] <- f.call.metacritic.API(games.web[i])
}
## bind into one dataframe
metacritic <- rbindlist(mtac, fill = TRUE)
# remove last stray column (from the empty/missing results of the API calls)
#select(-result) %>% # this breaks if there are no invalid calls
# remove leading "result." in variable names
metacritic <- setNames(gsub("^result.", "", names(metacritic)))
# generate clean dataset from original games list
metacritic <- data.frame(name = games.vector) %>%
merge(metacritic, all.x = TRUE)
return(metacritic)
}
dta <- f.generate.metacritic.data(games)
f.generate.metacritic.data <- function(games.vector) {
## generate a dataframe of metacritic API data for a given vector of game names
# games.vector needs to be a character vector!
if(!is.character(games.vector)) stop("f.generate.metacritic.data(): input is not a character vector")
# clean the namelist -- API does not recognise spaces, and metacritic removes & and ndashes in titles
# replace spaces
games.web <- gsub(" ", "%20",
# remove "-" ndash
gsub(" - ", "  ",
# remove "&" ampersand
gsub("&", "", games.vector)))
# number of games in vector
num.of.games <- length(games.web)
## initialise dataset
mtac <- vector("list", num.of.games)
## fill list with API call results
for (i in seq_len(num.of.games)) {
mtac[[i]] <- f.call.metacritic.API(games.web[i])
}
## bind into one dataframe
metacritic <- rbindlist(mtac, fill = TRUE)
# remove last stray column (from the empty/missing results of the API calls)
#select(-result) %>% # this breaks if there are no invalid calls
# remove leading "result." in variable names
metacritic %<>%  setNames(gsub("^result.", "", names(metacritic)))
# generate clean dataset from original games list
metacritic <- data.frame(name = games.vector) %>%
merge(metacritic, all.x = TRUE)
return(metacritic)
}
dta <- f.generate.metacritic.data(games)
library(dplyr)
a %<>% a
library(magrittr)
dta <- f.generate.metacritic.data(games)
dta
library(source.gist)
install.packages("source.gist")
library(source.gist)
update.packages(checkBuilt = TRUE, ask = FALSE)
library(slidify)
wd <- "D:/github/introduction_shiny"
setwd(wd)
author("shiny-introduction")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
